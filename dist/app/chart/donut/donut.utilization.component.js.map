{"version":3,"file":"donut.utilization.component.js","sourceRoot":"","sources":["../../../../build/src/app/chart/donut/donut.utilization.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { DonutUtilizationConfig } from './donut-utilization-config';\nimport { DonutComponent } from './donut.component';\n\n/**\n * Donut Utilization chart component.\n *\n * Note: In order to use charts, please include the following JavaScript file from patternfly. For example:\n * <code>require('patternfly/dist/js/patternfly-settings');</code>\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-chart-donut-utilization',\n  template: `<div class=\"pct-donut-chart-pf\"><span [ngClass]=\"{'pct-donut-chart-pf-left': config.gauge.outerLabelAlignment === 'left',\n                   'pct-donut-chart-pf-right': config.gauge.outerLabelAlignment === 'right'}\"><span class=\"pct-donut-chart-pf-chart\"><div #chartElement id=\"{{config.chartId}}\"></div></span><span [ngClass]=\"{'text-right': config.gauge.outerLabelAlignment === 'left',\n                      'text-left': config.gauge.outerLabelAlignment === 'right',\n                      'text-center': config.gauge.outerLabelAlignment !== 'left' && config.gauge.outerLabelAlignment !== 'right'}\"><ng-content></ng-content></span></span></div>`\n})\nexport class DonutUtilizationComponent extends DonutComponent {\n  /**\n   * Configuration object containing details about how to render the utilization chart\n   */\n  @Input() config: DonutUtilizationConfig;\n\n  /**\n   * Event emitted when the Used amount passes a user defined threshold\n   * @type {EventEmitter}\n   */\n  @Output() thresholdChanged: EventEmitter<any> = new EventEmitter();\n\n  private threshold: string;\n\n  /**\n   * Returns an object containing center label properties\n   * @returns {any}\n   */\n  getCenterLabelText(): any {\n    // Public for testing\n\n    this.updateGaugeMetrics();\n    const units: string = this.config.gauge.units;\n    const available: number = this.config.gauge.available;\n    const total: number = this.config.gauge.total;\n    const percent: number = this.config.gauge.percent;\n    const used: number = this.config.gauge.used;\n    const labelFormat: string = this.config.gauge.centerLabelFormat;\n\n    let centerLabelText: any = {};\n\n    if (this.config.gauge.centerLabelFn) {\n      let labelText: any = this.config.gauge.centerLabelFn();\n      centerLabelText.title = labelText.title;\n      centerLabelText.subTitle = labelText.subTitle;\n    } else {\n      switch (labelFormat) {\n        case 'none':\n          centerLabelText.title = '';\n          centerLabelText.subTitle = '';\n          break;\n        case 'available':\n          centerLabelText.title = available;\n          centerLabelText.subTitle = units + ' Available';\n          break;\n        case 'percent':\n          centerLabelText.title = percent + '%';\n          centerLabelText.subTitle = 'of ' + total + ' ' + units;\n          break;\n        default:\n          centerLabelText.title = used;\n          centerLabelText.subTitle = units + ' Used';\n      }\n    }\n\n    return centerLabelText;\n  }\n\n  /**\n   * get C3 chart data from config.gauge properties\n   */\n  protected getChartData(): any {\n    this.updateGaugeMetrics();\n    return {\n      columns: [\n        ['Used', this.config.gauge.used],\n        ['Available', this.config.gauge.available]\n      ],\n      colors: this.getUtilizationColors(),\n      groups: [\n        ['used', 'available']\n      ]\n    };\n  }\n\n  private updateGaugeMetrics(): any {\n    this.config.gauge.available = this.config.gauge.total - this.config.gauge.used;\n    this.config.gauge.percent = Math.round(this.config.gauge.used / this.config.gauge.total * 100.0);\n  }\n\n  private getUtilizationColors(): any {\n    return {\n      Used: this.getUtilizationUsedColor(this.config.gauge.percent, this.config.gauge.thresholds),\n      Available: this.chartDefaults.getDefaultDonutColors().pattern[1]  // grey\n    };\n  }\n\n  private getUtilizationUsedColor(used: number, thresholds: any) {\n    let threshold: string = 'none';\n\n    let thresholdColors = this.chartDefaults.getDefaultRelationshipDonutColors().pattern;\n    let color = thresholdColors[0];      // default blue\n    let errorColor = thresholdColors[1]; // red\n    let warnColor = thresholdColors[2];  // orange\n    let okColor = thresholdColors[3];    // green\n\n    if (thresholds) {\n      threshold = 'ok';\n      color = okColor;\n      if (used >= thresholds.error) {\n        threshold = 'error';\n        color = errorColor;\n      } else if (used >= thresholds.warning) {\n        threshold = 'warning';\n        color = warnColor;\n      }\n    }\n\n    if (!this.threshold || this.threshold !== threshold) {\n      this.threshold = threshold;\n      this.thresholdChanged.emit(this.threshold);\n    }\n\n    return color;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}